syntax = "proto3";

package faabric;

// ---------------------------------------------
// UTIL MESSAGES
// ---------------------------------------------

message EmptyResponse {
    int32 empty = 1;
}

message EmptyRequest {
    int32 empty = 1;
}

// ---------------------------------------------
// FUNCTION SCHEDULING
// ---------------------------------------------

message BatchExecuteRequest {
    // Each BatchExecuteRequest has a unique app id
    int32 appId = 1;
    // TODO: consider adding user/func to BER
    // TODO: consider adding the request type: SCALE_CHANGE, DIST_CHANGE, NEW

    enum BatchExecuteType {
        FUNCTIONS = 0;
        THREADS = 1;
        PROCESSES = 2;
        MIGRATION = 3;
    }

    BatchExecuteType type = 2;

    // Shared snapshot used for threads
    string snapshotKey = 3;

    repeated Message messages = 5;

    // Arbitrary context for this batch
    int32 subType = 6;
    bytes contextData = 7;

    // Flag set by the scheduler when this batch is all executing on a single
    // host
    bool singleHost = 8;

    // TODO(planner-schedule): remove me
    // Temporary flag to indicate the workers that the BER comes from the
    // planner (i.e. proxy-ed through planner) and so it has not been scheduled
    // yet. Whenever the planner does scheduling we will be able to remove this
    bool comesFromPlanner = 9;
}

message BatchExecuteRequestStatus {
    // Each BatchExecuteRequest has a unique app id
    int32 appId = 1;

    bool finished = 2;

    repeated Message messageResults = 3;

    // Batches can dynamically change size throughout execution. This parameter
    // is a hint provided by the client letting faabric know how many message
    // results we expect for this BER
    int32 expectedNumMessages = 4;
}

message HostResources {
    int32 slots = 1;
    int32 usedSlots = 2;
}

message UnregisterRequest {
    string host = 1;
    string user = 2;
    string function = 3;
}

message FunctionStatusResponse {
    enum FunctionStatus {
        OK = 0;
        ERROR = 1;
    }
    FunctionStatus status = 1;
}

message Message {
    int32 id = 1;
    // The app id indicates which BatchExecuteRequest this message belongs to.
    // Each BER has a unique app id
    int32 appId = 2;
    int32 appIdx = 3;
    string masterHost = 4;

    enum MessageType {
        CALL = 0;
        KILL = 1;
        EMPTY = 2;
        FLUSH = 3;
    }

    MessageType type = 5;
    string user = 6;
    string function = 7;

    bytes inputData = 8 [json_name = "input_data"];
    string outputData = 9 [json_name = "output_data"];

    int32 funcPtr = 10;
    int32 returnValue = 11;

    string snapshotKey = 12;

    int64 timestamp = 14 [json_name = "start_ts"];
    string resultKey = 15;
    bool executesLocally = 16;
    string statusKey = 17;

    string executedHost = 18;
    int64 finishTimestamp = 19 [json_name = "finish_ts"];

    bool isPython = 21 [json_name = "python"];

    string pythonUser = 24 [json_name = "py_user"];
    string pythonFunction = 25 [json_name = "py_func"];
    string pythonEntry = 26;

    // Function groups
    int32 groupId = 27;
    int32 groupIdx = 28;
    int32 groupSize = 29;

    // MPI
    bool isMpi = 30 [json_name = "mpi"];
    int32 mpiWorldId = 31;
    int32 mpiRank = 32;
    int32 mpiWorldSize = 33 [json_name = "mpi_world_size"];

    string cmdline = 34;

    // Exec-graph utils
    bool recordExecGraph = 35 [json_name = "record_exec_graph"];
    repeated int32 chainedMsgIds = 36;
    map<string, int32> intExecGraphDetails = 37;
    map<string, string> execGraphDetails = 38;

    // Function migration
    int32 migrationCheckPeriod = 39 [json_name = "migration_check_period"];

    // Scheduling
    string topologyHint = 40 [json_name = "topology_hint"];
}

// ---------------------------------------------
// STATE SERVICE
// ---------------------------------------------

message StateRequest {
    string user = 1;
    string key = 2;
    bytes data = 3;
}

message StateChunkRequest {
    string user = 1;
    string key = 2;
    uint64 offset = 3;
    uint64 chunkSize = 4;
}

message StateResponse {
    string user = 1;
    string key = 2;
    bytes data = 3;
}

message StatePart {
    string user = 1;
    string key = 2;
    uint64 offset = 3;
    bytes data = 4;
}

message StateSizeResponse {
    string user = 1;
    string key = 2;
    uint64 stateSize = 3;
}

message StateAppendedRequest {
    string user = 1;
    string key = 2;
    uint32 nValues = 3;
}

message StateAppendedResponse {
    message AppendedValue {
        bytes data = 2;
    }
    string user = 1;
    string key = 2;
    repeated AppendedValue values = 3;
}

// ---------------------------------------------
// POINT-TO-POINT
// ---------------------------------------------

message PointToPointMessage {
    int32 appId = 1;
    int32 groupId = 2;
    int32 sendIdx = 3;
    int32 recvIdx = 4;
    bytes data = 5;
}

message PointToPointMappings {
    int32 appId = 1;
    int32 groupId = 2;

    message PointToPointMapping {
        string host = 1;
        int32 messageId = 2;
        int32 appIdx = 3;
        int32 groupIdx = 4;
    }

    repeated PointToPointMapping mappings = 3;
}

// ---------------------------------------------
// FUNCTION MIGRATIONS
// ---------------------------------------------

message PendingMigrations {
    int32 appId = 1;
    int32 groupId = 2;

    message PendingMigration {
        Message msg = 1;
        string srcHost = 2;
        string dstHost = 3;
    }

    repeated PendingMigration migrations = 3;
}
