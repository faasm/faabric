name: Sanitiser Checks

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  address-sanitiser:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm/faabric:0.2.2
    defaults:
      run:
        working-directory: /code/faabric
    services:
      redis:
        image: redis
    steps:
      # --- Code update ---
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      # --- Set-up ---
      - name: "Ping redis"
        run: redis-cli -h redis ping
      # --- Build with thread sanitising
      - name: "Build tests with leak sanitising"
        run: inv dev.sanitise Address
      # --- Tests ---
      - name: "Run tests with address sanitising on and print to stderr to file"
        run: ./bin/faabric_tests > /dev/null # 2> ./addsan.log
        working-directory: /build/faabric/static
        #       - name: "DELETE ME"
        #         run: cat ./addsan.log
        #       # --- Compare with expected output
        #       - name: "Compare with expected output"
        #         run: diff ./addsan.log ./tests/sanitise/expected_addsan.log

  thread-sanitiser:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm/faabric:0.2.2
    defaults:
      run:
        working-directory: /code/faabric
    services:
      redis:
        image: redis
    steps:
      # --- Code update ---
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      # --- Set-up ---
      - name: "Ping redis"
        run: redis-cli -h redis ping
      # --- Build with thread sanitising
      - name: "Build tests with thread sanitising"
        run: inv dev.sanitise Thread
      # --- Tests ---
      - name: "Run tests with thread sanitising on and print stderr to file"
        run: ./bin/faabric_tests > /dev/null #2> ./threadsan.log
        working-directory: /build/faabric/static
        #       - name: "DELETE ME"
        #         run: cat ./threadsan.log
        #         working-directory: /build/faabric/static
        #       # --- Compare with expected output
        #       - name: "Compare with expected output"
        #         run: diff ./threadsan.log ./tests/sanitise/expected_threadsan.log

  undefined-sanitiser:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm/faabric:0.2.2
    defaults:
      run:
        working-directory: /code/faabric
    services:
      redis:
        image: redis
    steps:
      # --- Code update ---
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      # --- Set-up ---
      - name: "Ping redis"
        run: redis-cli -h redis ping
      # --- Build with thread sanitising
      - name: "Build tests with undefined sanitising"
        run: inv dev.sanitise Undefined
      # --- Tests ---
      - name: "Run tests with undefined sanitising on and print stderr to file"
        run: ./bin/faabric_tests > /dev/null # 2> ./ubsan.log
        working-directory: /build/faabric/static
        #       - name: "DELETE ME"
        #         run: cat ./ubsan.log
        #       # --- Compare with expected output
        #       - name: "Compare with expected output"
        #         run: diff ./ubsan.log ./tests/sanitise/expected_ubsan.log

  leak-sanitiser:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm/faabric:0.2.2
    defaults:
      run:
        working-directory: /code/faabric
    services:
      redis:
        image: redis
    steps:
      # --- Code update ---
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      # --- Set-up ---
      - name: "Ping redis"
        run: redis-cli -h redis ping
      # --- Build with thread sanitising
      - name: "Build tests with leak sanitising"
        run: inv dev.sanitise Leak
      # --- Tests ---
      - name: "Run tests with leak sanitising on and print stderr to file"
        run: ./bin/faabric_tests > /dev/null # 2> ./leaksan.log
        working-directory: /build/faabric/static
        #       - name: "DELETE ME"
        #         run: cat ./leaksan.log
        #       # --- Compare with expected output
        #       - name: "Compare with expected output"
        #         run: diff ./leaksan.log ./tests/sanitise/expected_leaksan.log

  memory-sanitiser:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm/faabric:0.2.2
    defaults:
      run:
        working-directory: /code/faabric
    services:
      redis:
        image: redis
    steps:
      # --- Code update ---
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      # --- Set-up ---
      - name: "Ping redis"
        run: redis-cli -h redis ping
      # --- Build with thread sanitising
      - name: "Build tests with memory sanitising"
        run: inv dev.sanitise Memory
      # --- Tests ---
      - name: "Run tests with memory sanitising on and print stderr to file"
        run: ./bin/faabric_tests > /dev/null # 2> ./memsan.log
        working-directory: /build/faabric/static
        #       - name: "DELETE ME"
        #         run: cat ./memsan.log
        #       # --- Compare with expected output
        #       - name: "Compare with expected output"
        #         run: diff ./memsan.log ./tests/sanitise/expected_memsan.log
