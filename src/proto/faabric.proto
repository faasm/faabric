syntax = "proto3";

package faabric;

// ---------------------------------------------
// UTIL MESSAGES
// ---------------------------------------------

message EmptyResponse {
    int32 empty = 1;
}

message EmptyRequest {
    int32 empty = 1;
}

// ---------------------------------------------
// FUNCTION SCHEDULING
// ---------------------------------------------

message BatchExecuteRequest {
    int32 id = 1;

    enum BatchExecuteType {
        FUNCTIONS = 0;
        THREADS = 1;
        PROCESSES = 2;
    }

    BatchExecuteType type = 2;

    // Shared snapshot used for threads
    string snapshotKey = 3;

    repeated Message messages = 5;

    // Arbitrary context for this batch
    int32 subType = 6;
    bytes contextData = 7;
}

message HostResources {
    int32 slots = 1;
    int32 usedSlots = 2;
}

message UnregisterRequest {
    string host = 1;
    Message function = 2;
}

message FunctionStatusResponse {
    enum FunctionStatus {
        OK = 0;
        ERROR = 1;
    }
    FunctionStatus status = 1;
}

message MPIMessage {
    enum MPIMessageType {
        NORMAL = 0;
        BARRIER_JOIN = 1;
        BARRIER_DONE = 2;
        SCATTER = 3;
        GATHER = 4;
        ALLGATHER = 5;
        REDUCE = 6;
        SCAN = 7;
        ALLREDUCE = 8;
        ALLTOALL = 9;
        SENDRECV = 10;
    };

    MPIMessageType messageType = 1;

    int32 id = 2;
    int32 worldId = 3;
    int32 sender = 4;
    int32 destination = 5;
    int32 type = 6;
    int32 count = 7;
    bytes buffer = 8;
}

// Instead of sending a map, or a list of ranks, we use the repeated string
// index as rank. Note that protobuf guarantess in-order delivery of repeated
// fields.
message MpiHostsToRanksMessage {
    repeated string hosts = 1;
    repeated int32 basePorts = 2;
}

message Message {
    int32 id = 1;
    int32 appId = 2;
    int32 appIndex = 3;
    string masterHost = 4;

    enum MessageType {
        CALL = 0;
        KILL = 1;
        EMPTY = 2;
        FLUSH = 3;
    }

    MessageType type = 5;
    string user = 6;
    string function = 7;

    bytes inputData = 8;
    bytes outputData = 9;

    int32 funcPtr = 10;
    int32 returnValue = 11;

    string snapshotKey = 12;

    int64 timestamp = 14;
    string resultKey = 15;
    bool executesLocally = 16;
    string statusKey = 17;

    string executedHost = 18;
    int64 finishTimestamp = 19;

    bool isAsync = 20;
    bool isPython = 21;
    bool isStatusRequest = 22;
    bool isExecGraphRequest = 23;

    string pythonUser = 24;
    string pythonFunction = 25;
    string pythonEntry = 26;

    bool isMpi = 27;
    int32 mpiWorldId = 28;
    int32 mpiRank = 29;
    int32 mpiWorldSize = 30;

    string cmdline = 31;

    // SGX
    bool isSgx = 32;

    string sgxSid = 33;
    string sgxNonce = 34;
    string sgxTag = 35;
    bytes sgxPolicy = 36;
    bytes sgxResult = 37;
}

// ---------------------------------------------
// STATE SERVICE
// ---------------------------------------------

message StateRequest {
    string user = 1;
    string key = 2;
    bytes data = 3;
}

message StateChunkRequest {
    string user = 1;
    string key = 2;
    uint64 offset = 3;
    uint64 chunkSize = 4;
}

message StateResponse {
    string user = 1;
    string key = 2;
    bytes data = 3;
}

message StatePart {
    string user = 1;
    string key = 2;
    uint64 offset = 3;
    bytes data = 4;
}

message StateSizeResponse {
    string user = 1;
    string key = 2;
    uint64 stateSize = 3;
}

message StateAppendedRequest {
    string user = 1;
    string key = 2;
    uint32 nValues = 3;
}

message StateAppendedResponse {
    message AppendedValue {
        bytes data = 2;
    }
    string user = 1;
    string key = 2;
    repeated AppendedValue values = 3;
}

// ---------------------------------------------
// POINT-TO-POINT
// ---------------------------------------------

message PointToPointMessage {
    int32 appId = 1;
    int32 sendIdx = 2;
    int32 recvIdx = 3;

    bytes data = 4;
}

message PointToPointMappings {
    message PointToPointMapping {
        int32 appId = 1;
        int32 recvIdx = 2;
        string host = 3;
    }
    repeated PointToPointMapping mappings = 1;
}
