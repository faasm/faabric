name: Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, ready_for_review]

defaults:
  run:
    shell: bash

jobs:
  formatting:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm/faabric:0.2.2
    defaults:
      run:
        working-directory: /code/faabric
    services:
      redis:
        image: redis
    steps:
      # --- Code update ---
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      # --- Formatting checks ---
      - name: "Python formatting check"
        run: ./bin/check_python.sh
      - name: "Run C/C++ formatting"
        run: ./bin/run_clang_format.sh
      - name: "Check C/C++ formatting changes"
        run: git diff --exit-code

  tests:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm/faabric:0.2.2
    defaults:
      run:
        working-directory: /code/faabric
    services:
      redis:
        image: redis
    steps:
      # --- Code update ---
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      # --- Set-up ---
      - name: "Ping redis"
        run: redis-cli -h redis ping
      # --- Cache based on Conan version and ExternalProjects cmake source
      - name: Get Conan version
        id: get-conan-version
        run: |
          echo "::set-output name=conan-version::$(conan --version | tr -d '[:alpha:] ')"
      - name: "Hash ExternalProjects"
        id: hash-external
        run: |
          echo "::set-output name=hash-external::$(sha256sum cmake/ExternalProjects.cmake | cut '-d ' -f 1)"
      - uses: actions/cache@v2
        with:
          path: '~/.conan'
          key: ${{ runner.os }}-${{ steps.get-conan-version.outputs.conan-version }}-${{ steps.hash-external.outputs.hash-external }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.get-conan-version.outputs.conan-version }}-
            ${{ runner.os }}-
      # --- Tests build - need a debug build for actually running tests ---
      - name: "Run cmake for tests"
        run: inv dev.cmake --build=Debug
      - name: "Build tests"
        run: inv dev.cc faabric_tests
      # --- Tests ---
      - name: "Run tests"
        run: ./bin/faabric_tests
        working-directory: /build/faabric/static

  dist-tests:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      # --- Code update ---
      - name: "Check out code"
        uses: actions/checkout@v2
        # --- Cache based on Conan version and ExternalProjects cmake source
      - name: "Get Conan version"
        id: get-conan-version
        run: |
          docker-compose run --rm cli conan --version 2>/tmp/conan-ver-log | tee /tmp/conan-ver
          grep 'Conan version' /tmp/conan-ver || exit 1
          sudo chown -R $(id -u):$(id -g) ~/.conan
          echo "::set-output name=conan-version::$(grep 'Conan version' /tmp/conan-ver | tr -d '[:alpha:] ')"
        env:
          CONAN_CACHE_MOUNT_SOURCE: ~/.conan/
      - name: "Get Conan Version - Show Log"
        if: always()
        run: cat /tmp/conan-ver-log
      - name: "Hash ExternalProjects"
        id: hash-external
        run: |
          echo "::set-output name=hash-external::$(sha256sum cmake/ExternalProjects.cmake | cut '-d ' -f 1)"
      - uses: actions/cache@v2
        with:
          path: '~/.conan'
          key: ${{ runner.os }}-${{ steps.get-conan-version.outputs.conan-version }}-${{ steps.hash-external.outputs.hash-external }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.get-conan-version.outputs.conan-version }}-
            ${{ runner.os }}-
      # --- Build and test ---
      - name: "Build distributed tests"
        run: ./dist-test/build.sh
      - name: "Run the distributed tests"
        run: ./dist-test/run.sh

  examples:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      HOST_TYPE: ci
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm/faabric:0.2.2
    defaults:
      run:
        working-directory: /code/faabric
    services:
      redis:
        image: redis
    steps:
      # --- Code update ---
      - name: "Fetch ref"
        run: git fetch origin ${GITHUB_REF}:ci-branch
      - name: "Check out branch"
        run: git checkout --force ci-branch
      # --- Cache based on Conan version and ExternalProjects cmake source
      - name: "Get Conan version"
        id: get-conan-version
        run: |
          echo "::set-output name=conan-version::$(conan --version | tr -d '[:alpha:] ')"
      - name: "Hash ExternalProjects"
        id: hash-external
        run: |
          echo "::set-output name=hash-external::$(sha256sum cmake/ExternalProjects.cmake | cut '-d ' -f 1)"
      - uses: actions/cache@v2
        with:
          path: '~/.conan'
          key: release-${{ runner.os }}-${{ steps.get-conan-version.outputs.conan-version }}-${{ steps.hash-external.outputs.hash-external }}
          restore-keys: |
            release-${{ runner.os }}-${{ steps.get-conan-version.outputs.conan-version }}-${{ steps.hash-external.outputs.hash-external }}
            release-${{ runner.os }}-${{ steps.get-conan-version.outputs.conan-version }}-
            release-${{ runner.os }}-
      # --- Examples ---
      - name: "Run cmake shared"
        run: inv dev.cmake --shared --build=Release
      - name: "Build Faabric shared library"
        run: inv dev.cc faabric --shared
      - name: "Install Faabric shared library"
        run: inv dev.install faabric --shared
      - name: "Build MPI native library"
        run: inv dev.cc faabricmpi_native --shared
      - name: "Install MPI native library"
        run: inv dev.install faabricmpi_native --shared
      - name: "Build examples"
        run: inv examples
      - name: "Run example to check"
        run: inv examples.execute check

  mpi_native:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: "Compose version"
        run: docker-compose --version
      # --- Code update ---
      - name: "Check out code"
        uses: actions/checkout@v2
      # --- Examples ---
      - name: "Build docker compose images"
        run: ./mpi-native/build.sh
      - name: "Run all examples"
        run: ./mpi-native/run_all.sh
