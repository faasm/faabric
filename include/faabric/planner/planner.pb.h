// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planner_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planner_2eproto;
namespace faabric {
namespace planner {
class AvailableHostsResponse;
struct AvailableHostsResponseDefaultTypeInternal;
extern AvailableHostsResponseDefaultTypeInternal _AvailableHostsResponse_default_instance_;
class EmptyRequest;
struct EmptyRequestDefaultTypeInternal;
extern EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;
class EmptyResponse;
struct EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class Host;
struct HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class HttpMessage;
struct HttpMessageDefaultTypeInternal;
extern HttpMessageDefaultTypeInternal _HttpMessage_default_instance_;
class PlannerConfig;
struct PlannerConfigDefaultTypeInternal;
extern PlannerConfigDefaultTypeInternal _PlannerConfig_default_instance_;
class RegisterHostRequest;
struct RegisterHostRequestDefaultTypeInternal;
extern RegisterHostRequestDefaultTypeInternal _RegisterHostRequest_default_instance_;
class RegisterHostResponse;
struct RegisterHostResponseDefaultTypeInternal;
extern RegisterHostResponseDefaultTypeInternal _RegisterHostResponse_default_instance_;
class RemoveHostRequest;
struct RemoveHostRequestDefaultTypeInternal;
extern RemoveHostRequestDefaultTypeInternal _RemoveHostRequest_default_instance_;
class RemoveHostResponse;
struct RemoveHostResponseDefaultTypeInternal;
extern RemoveHostResponseDefaultTypeInternal _RemoveHostResponse_default_instance_;
class ResponseStatus;
struct ResponseStatusDefaultTypeInternal;
extern ResponseStatusDefaultTypeInternal _ResponseStatus_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace planner
}  // namespace faabric
PROTOBUF_NAMESPACE_OPEN
template<> ::faabric::planner::AvailableHostsResponse* Arena::CreateMaybeMessage<::faabric::planner::AvailableHostsResponse>(Arena*);
template<> ::faabric::planner::EmptyRequest* Arena::CreateMaybeMessage<::faabric::planner::EmptyRequest>(Arena*);
template<> ::faabric::planner::EmptyResponse* Arena::CreateMaybeMessage<::faabric::planner::EmptyResponse>(Arena*);
template<> ::faabric::planner::Host* Arena::CreateMaybeMessage<::faabric::planner::Host>(Arena*);
template<> ::faabric::planner::HttpMessage* Arena::CreateMaybeMessage<::faabric::planner::HttpMessage>(Arena*);
template<> ::faabric::planner::PlannerConfig* Arena::CreateMaybeMessage<::faabric::planner::PlannerConfig>(Arena*);
template<> ::faabric::planner::RegisterHostRequest* Arena::CreateMaybeMessage<::faabric::planner::RegisterHostRequest>(Arena*);
template<> ::faabric::planner::RegisterHostResponse* Arena::CreateMaybeMessage<::faabric::planner::RegisterHostResponse>(Arena*);
template<> ::faabric::planner::RemoveHostRequest* Arena::CreateMaybeMessage<::faabric::planner::RemoveHostRequest>(Arena*);
template<> ::faabric::planner::RemoveHostResponse* Arena::CreateMaybeMessage<::faabric::planner::RemoveHostResponse>(Arena*);
template<> ::faabric::planner::ResponseStatus* Arena::CreateMaybeMessage<::faabric::planner::ResponseStatus>(Arena*);
template<> ::faabric::planner::Timestamp* Arena::CreateMaybeMessage<::faabric::planner::Timestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace faabric {
namespace planner {

enum ResponseStatus_Status : int {
  ResponseStatus_Status_OK = 0,
  ResponseStatus_Status_ERROR = 1,
  ResponseStatus_Status_ResponseStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResponseStatus_Status_ResponseStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResponseStatus_Status_IsValid(int value);
constexpr ResponseStatus_Status ResponseStatus_Status_Status_MIN = ResponseStatus_Status_OK;
constexpr ResponseStatus_Status ResponseStatus_Status_Status_MAX = ResponseStatus_Status_ERROR;
constexpr int ResponseStatus_Status_Status_ARRAYSIZE = ResponseStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatus_Status_descriptor();
template<typename T>
inline const std::string& ResponseStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseStatus_Status_descriptor(), enum_t_value);
}
inline bool ResponseStatus_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseStatus_Status>(
    ResponseStatus_Status_descriptor(), name, value);
}
enum HttpMessage_Type : int {
  HttpMessage_Type_NO_TYPE = 0,
  HttpMessage_Type_RESET = 1,
  HttpMessage_Type_FLUSH_HOSTS = 2,
  HttpMessage_Type_HttpMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HttpMessage_Type_HttpMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HttpMessage_Type_IsValid(int value);
constexpr HttpMessage_Type HttpMessage_Type_Type_MIN = HttpMessage_Type_NO_TYPE;
constexpr HttpMessage_Type HttpMessage_Type_Type_MAX = HttpMessage_Type_FLUSH_HOSTS;
constexpr int HttpMessage_Type_Type_ARRAYSIZE = HttpMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HttpMessage_Type_descriptor();
template<typename T>
inline const std::string& HttpMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HttpMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HttpMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HttpMessage_Type_descriptor(), enum_t_value);
}
inline bool HttpMessage_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HttpMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HttpMessage_Type>(
    HttpMessage_Type_descriptor(), name, value);
}
// ===================================================================

class EmptyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.EmptyResponse) */ {
 public:
  inline EmptyResponse() : EmptyResponse(nullptr) {}
  ~EmptyResponse() override;
  explicit PROTOBUF_CONSTEXPR EmptyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyResponse(const EmptyResponse& from);
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmptyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EmptyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.EmptyResponse";
  }
  protected:
  explicit EmptyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyFieldNumber = 1,
  };
  // int32 empty = 1;
  void clear_empty();
  int32_t empty() const;
  void set_empty(int32_t value);
  private:
  int32_t _internal_empty() const;
  void _internal_set_empty(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:faabric.planner.EmptyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t empty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class EmptyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.EmptyRequest) */ {
 public:
  inline EmptyRequest() : EmptyRequest(nullptr) {}
  ~EmptyRequest() override;
  explicit PROTOBUF_CONSTEXPR EmptyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyRequest(const EmptyRequest& from);
  EmptyRequest(EmptyRequest&& from) noexcept
    : EmptyRequest() {
    *this = ::std::move(from);
  }

  inline EmptyRequest& operator=(const EmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyRequest& operator=(EmptyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyRequest* internal_default_instance() {
    return reinterpret_cast<const EmptyRequest*>(
               &_EmptyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EmptyRequest& a, EmptyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmptyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmptyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EmptyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.EmptyRequest";
  }
  protected:
  explicit EmptyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyFieldNumber = 1,
  };
  // int32 empty = 1;
  void clear_empty();
  int32_t empty() const;
  void set_empty(int32_t value);
  private:
  int32_t _internal_empty() const;
  void _internal_set_empty(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:faabric.planner.EmptyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t empty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class ResponseStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.ResponseStatus) */ {
 public:
  inline ResponseStatus() : ResponseStatus(nullptr) {}
  ~ResponseStatus() override;
  explicit PROTOBUF_CONSTEXPR ResponseStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseStatus(const ResponseStatus& from);
  ResponseStatus(ResponseStatus&& from) noexcept
    : ResponseStatus() {
    *this = ::std::move(from);
  }

  inline ResponseStatus& operator=(const ResponseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseStatus& operator=(ResponseStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseStatus* internal_default_instance() {
    return reinterpret_cast<const ResponseStatus*>(
               &_ResponseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponseStatus& a, ResponseStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.ResponseStatus";
  }
  protected:
  explicit ResponseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResponseStatus_Status Status;
  static constexpr Status OK =
    ResponseStatus_Status_OK;
  static constexpr Status ERROR =
    ResponseStatus_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return ResponseStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ResponseStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ResponseStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ResponseStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ResponseStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ResponseStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return ResponseStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .faabric.planner.ResponseStatus.Status status = 1;
  void clear_status();
  ::faabric::planner::ResponseStatus_Status status() const;
  void set_status(::faabric::planner::ResponseStatus_Status value);
  private:
  ::faabric::planner::ResponseStatus_Status _internal_status() const;
  void _internal_set_status(::faabric::planner::ResponseStatus_Status value);
  public:

  // @@protoc_insertion_point(class_scope:faabric.planner.ResponseStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class Timestamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  explicit PROTOBUF_CONSTEXPR Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timestamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Timestamp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochMsFieldNumber = 1,
  };
  // int64 epochMs = 1;
  void clear_epochms();
  int64_t epochms() const;
  void set_epochms(int64_t value);
  private:
  int64_t _internal_epochms() const;
  void _internal_set_epochms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:faabric.planner.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t epochms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class HttpMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.HttpMessage) */ {
 public:
  inline HttpMessage() : HttpMessage(nullptr) {}
  ~HttpMessage() override;
  explicit PROTOBUF_CONSTEXPR HttpMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HttpMessage(const HttpMessage& from);
  HttpMessage(HttpMessage&& from) noexcept
    : HttpMessage() {
    *this = ::std::move(from);
  }

  inline HttpMessage& operator=(const HttpMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpMessage& operator=(HttpMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpMessage* internal_default_instance() {
    return reinterpret_cast<const HttpMessage*>(
               &_HttpMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HttpMessage& a, HttpMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HttpMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HttpMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.HttpMessage";
  }
  protected:
  explicit HttpMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HttpMessage_Type Type;
  static constexpr Type NO_TYPE =
    HttpMessage_Type_NO_TYPE;
  static constexpr Type RESET =
    HttpMessage_Type_RESET;
  static constexpr Type FLUSH_HOSTS =
    HttpMessage_Type_FLUSH_HOSTS;
  static inline bool Type_IsValid(int value) {
    return HttpMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    HttpMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    HttpMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    HttpMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return HttpMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return HttpMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return HttpMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .faabric.planner.HttpMessage.Type type = 1;
  void clear_type();
  ::faabric::planner::HttpMessage_Type type() const;
  void set_type(::faabric::planner::HttpMessage_Type value);
  private:
  ::faabric::planner::HttpMessage_Type _internal_type() const;
  void _internal_set_type(::faabric::planner::HttpMessage_Type value);
  public:

  // @@protoc_insertion_point(class_scope:faabric.planner.HttpMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class PlannerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.PlannerConfig) */ {
 public:
  inline PlannerConfig() : PlannerConfig(nullptr) {}
  ~PlannerConfig() override;
  explicit PROTOBUF_CONSTEXPR PlannerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlannerConfig(const PlannerConfig& from);
  PlannerConfig(PlannerConfig&& from) noexcept
    : PlannerConfig() {
    *this = ::std::move(from);
  }

  inline PlannerConfig& operator=(const PlannerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlannerConfig& operator=(PlannerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlannerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlannerConfig* internal_default_instance() {
    return reinterpret_cast<const PlannerConfig*>(
               &_PlannerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlannerConfig& a, PlannerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlannerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlannerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlannerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlannerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlannerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlannerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlannerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.PlannerConfig";
  }
  protected:
  explicit PlannerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kHostTimeoutFieldNumber = 2,
    kNumThreadsHttpServerFieldNumber = 3,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 hostTimeout = 2;
  void clear_hosttimeout();
  int32_t hosttimeout() const;
  void set_hosttimeout(int32_t value);
  private:
  int32_t _internal_hosttimeout() const;
  void _internal_set_hosttimeout(int32_t value);
  public:

  // int32 numThreadsHttpServer = 3;
  void clear_numthreadshttpserver();
  int32_t numthreadshttpserver() const;
  void set_numthreadshttpserver(int32_t value);
  private:
  int32_t _internal_numthreadshttpserver() const;
  void _internal_set_numthreadshttpserver(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:faabric.planner.PlannerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int32_t hosttimeout_;
  int32_t numthreadshttpserver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class Host final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.Host) */ {
 public:
  inline Host() : Host(nullptr) {}
  ~Host() override;
  explicit PROTOBUF_CONSTEXPR Host(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Host(const Host& from);
  Host(Host&& from) noexcept
    : Host() {
    *this = ::std::move(from);
  }

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }
  inline Host& operator=(Host&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Host& default_instance() {
    return *internal_default_instance();
  }
  static inline const Host* internal_default_instance() {
    return reinterpret_cast<const Host*>(
               &_Host_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Host& a, Host& b) {
    a.Swap(&b);
  }
  inline void Swap(Host* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Host* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Host* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Host>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Host& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Host& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Host* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.Host";
  }
  protected:
  explicit Host(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kRegisterTsFieldNumber = 4,
    kSlotsFieldNumber = 2,
    kHostIdFieldNumber = 3,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .faabric.planner.Timestamp registerTs = 4;
  bool has_registerts() const;
  private:
  bool _internal_has_registerts() const;
  public:
  void clear_registerts();
  const ::faabric::planner::Timestamp& registerts() const;
  PROTOBUF_NODISCARD ::faabric::planner::Timestamp* release_registerts();
  ::faabric::planner::Timestamp* mutable_registerts();
  void set_allocated_registerts(::faabric::planner::Timestamp* registerts);
  private:
  const ::faabric::planner::Timestamp& _internal_registerts() const;
  ::faabric::planner::Timestamp* _internal_mutable_registerts();
  public:
  void unsafe_arena_set_allocated_registerts(
      ::faabric::planner::Timestamp* registerts);
  ::faabric::planner::Timestamp* unsafe_arena_release_registerts();

  // int32 slots = 2;
  void clear_slots();
  int32_t slots() const;
  void set_slots(int32_t value);
  private:
  int32_t _internal_slots() const;
  void _internal_set_slots(int32_t value);
  public:

  // int32 hostId = 3;
  void clear_hostid();
  int32_t hostid() const;
  void set_hostid(int32_t value);
  private:
  int32_t _internal_hostid() const;
  void _internal_set_hostid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:faabric.planner.Host)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::faabric::planner::Timestamp* registerts_;
  int32_t slots_;
  int32_t hostid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class RegisterHostRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.RegisterHostRequest) */ {
 public:
  inline RegisterHostRequest() : RegisterHostRequest(nullptr) {}
  ~RegisterHostRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterHostRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterHostRequest(const RegisterHostRequest& from);
  RegisterHostRequest(RegisterHostRequest&& from) noexcept
    : RegisterHostRequest() {
    *this = ::std::move(from);
  }

  inline RegisterHostRequest& operator=(const RegisterHostRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterHostRequest& operator=(RegisterHostRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterHostRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterHostRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterHostRequest*>(
               &_RegisterHostRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RegisterHostRequest& a, RegisterHostRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterHostRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterHostRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterHostRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterHostRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterHostRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterHostRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterHostRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.RegisterHostRequest";
  }
  protected:
  explicit RegisterHostRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
  };
  // .faabric.planner.Host host = 1;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::faabric::planner::Host& host() const;
  PROTOBUF_NODISCARD ::faabric::planner::Host* release_host();
  ::faabric::planner::Host* mutable_host();
  void set_allocated_host(::faabric::planner::Host* host);
  private:
  const ::faabric::planner::Host& _internal_host() const;
  ::faabric::planner::Host* _internal_mutable_host();
  public:
  void unsafe_arena_set_allocated_host(
      ::faabric::planner::Host* host);
  ::faabric::planner::Host* unsafe_arena_release_host();

  // @@protoc_insertion_point(class_scope:faabric.planner.RegisterHostRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::faabric::planner::Host* host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class RegisterHostResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.RegisterHostResponse) */ {
 public:
  inline RegisterHostResponse() : RegisterHostResponse(nullptr) {}
  ~RegisterHostResponse() override;
  explicit PROTOBUF_CONSTEXPR RegisterHostResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterHostResponse(const RegisterHostResponse& from);
  RegisterHostResponse(RegisterHostResponse&& from) noexcept
    : RegisterHostResponse() {
    *this = ::std::move(from);
  }

  inline RegisterHostResponse& operator=(const RegisterHostResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterHostResponse& operator=(RegisterHostResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterHostResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterHostResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterHostResponse*>(
               &_RegisterHostResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RegisterHostResponse& a, RegisterHostResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterHostResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterHostResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterHostResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterHostResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterHostResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterHostResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterHostResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.RegisterHostResponse";
  }
  protected:
  explicit RegisterHostResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kConfigFieldNumber = 2,
    kHostIdFieldNumber = 3,
  };
  // .faabric.planner.ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::faabric::planner::ResponseStatus& status() const;
  PROTOBUF_NODISCARD ::faabric::planner::ResponseStatus* release_status();
  ::faabric::planner::ResponseStatus* mutable_status();
  void set_allocated_status(::faabric::planner::ResponseStatus* status);
  private:
  const ::faabric::planner::ResponseStatus& _internal_status() const;
  ::faabric::planner::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::faabric::planner::ResponseStatus* status);
  ::faabric::planner::ResponseStatus* unsafe_arena_release_status();

  // .faabric.planner.PlannerConfig config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::faabric::planner::PlannerConfig& config() const;
  PROTOBUF_NODISCARD ::faabric::planner::PlannerConfig* release_config();
  ::faabric::planner::PlannerConfig* mutable_config();
  void set_allocated_config(::faabric::planner::PlannerConfig* config);
  private:
  const ::faabric::planner::PlannerConfig& _internal_config() const;
  ::faabric::planner::PlannerConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::faabric::planner::PlannerConfig* config);
  ::faabric::planner::PlannerConfig* unsafe_arena_release_config();

  // int32 hostId = 3;
  void clear_hostid();
  int32_t hostid() const;
  void set_hostid(int32_t value);
  private:
  int32_t _internal_hostid() const;
  void _internal_set_hostid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:faabric.planner.RegisterHostResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::faabric::planner::ResponseStatus* status_;
  ::faabric::planner::PlannerConfig* config_;
  int32_t hostid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class RemoveHostRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.RemoveHostRequest) */ {
 public:
  inline RemoveHostRequest() : RemoveHostRequest(nullptr) {}
  ~RemoveHostRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveHostRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveHostRequest(const RemoveHostRequest& from);
  RemoveHostRequest(RemoveHostRequest&& from) noexcept
    : RemoveHostRequest() {
    *this = ::std::move(from);
  }

  inline RemoveHostRequest& operator=(const RemoveHostRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveHostRequest& operator=(RemoveHostRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveHostRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveHostRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveHostRequest*>(
               &_RemoveHostRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RemoveHostRequest& a, RemoveHostRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveHostRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveHostRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveHostRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveHostRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveHostRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveHostRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveHostRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.RemoveHostRequest";
  }
  protected:
  explicit RemoveHostRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
  };
  // .faabric.planner.Host host = 1;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::faabric::planner::Host& host() const;
  PROTOBUF_NODISCARD ::faabric::planner::Host* release_host();
  ::faabric::planner::Host* mutable_host();
  void set_allocated_host(::faabric::planner::Host* host);
  private:
  const ::faabric::planner::Host& _internal_host() const;
  ::faabric::planner::Host* _internal_mutable_host();
  public:
  void unsafe_arena_set_allocated_host(
      ::faabric::planner::Host* host);
  ::faabric::planner::Host* unsafe_arena_release_host();

  // @@protoc_insertion_point(class_scope:faabric.planner.RemoveHostRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::faabric::planner::Host* host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class RemoveHostResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.RemoveHostResponse) */ {
 public:
  inline RemoveHostResponse() : RemoveHostResponse(nullptr) {}
  ~RemoveHostResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveHostResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveHostResponse(const RemoveHostResponse& from);
  RemoveHostResponse(RemoveHostResponse&& from) noexcept
    : RemoveHostResponse() {
    *this = ::std::move(from);
  }

  inline RemoveHostResponse& operator=(const RemoveHostResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveHostResponse& operator=(RemoveHostResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveHostResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveHostResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveHostResponse*>(
               &_RemoveHostResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RemoveHostResponse& a, RemoveHostResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveHostResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveHostResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveHostResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveHostResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveHostResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveHostResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveHostResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.RemoveHostResponse";
  }
  protected:
  explicit RemoveHostResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .faabric.planner.ResponseStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::faabric::planner::ResponseStatus& status() const;
  PROTOBUF_NODISCARD ::faabric::planner::ResponseStatus* release_status();
  ::faabric::planner::ResponseStatus* mutable_status();
  void set_allocated_status(::faabric::planner::ResponseStatus* status);
  private:
  const ::faabric::planner::ResponseStatus& _internal_status() const;
  ::faabric::planner::ResponseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::faabric::planner::ResponseStatus* status);
  ::faabric::planner::ResponseStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:faabric.planner.RemoveHostResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::faabric::planner::ResponseStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class AvailableHostsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faabric.planner.AvailableHostsResponse) */ {
 public:
  inline AvailableHostsResponse() : AvailableHostsResponse(nullptr) {}
  ~AvailableHostsResponse() override;
  explicit PROTOBUF_CONSTEXPR AvailableHostsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AvailableHostsResponse(const AvailableHostsResponse& from);
  AvailableHostsResponse(AvailableHostsResponse&& from) noexcept
    : AvailableHostsResponse() {
    *this = ::std::move(from);
  }

  inline AvailableHostsResponse& operator=(const AvailableHostsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvailableHostsResponse& operator=(AvailableHostsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvailableHostsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvailableHostsResponse* internal_default_instance() {
    return reinterpret_cast<const AvailableHostsResponse*>(
               &_AvailableHostsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AvailableHostsResponse& a, AvailableHostsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AvailableHostsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvailableHostsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvailableHostsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvailableHostsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AvailableHostsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AvailableHostsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvailableHostsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faabric.planner.AvailableHostsResponse";
  }
  protected:
  explicit AvailableHostsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostsFieldNumber = 1,
  };
  // repeated .faabric.planner.Host hosts = 1;
  int hosts_size() const;
  private:
  int _internal_hosts_size() const;
  public:
  void clear_hosts();
  ::faabric::planner::Host* mutable_hosts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faabric::planner::Host >*
      mutable_hosts();
  private:
  const ::faabric::planner::Host& _internal_hosts(int index) const;
  ::faabric::planner::Host* _internal_add_hosts();
  public:
  const ::faabric::planner::Host& hosts(int index) const;
  ::faabric::planner::Host* add_hosts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faabric::planner::Host >&
      hosts() const;

  // @@protoc_insertion_point(class_scope:faabric.planner.AvailableHostsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faabric::planner::Host > hosts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyResponse

// int32 empty = 1;
inline void EmptyResponse::clear_empty() {
  empty_ = 0;
}
inline int32_t EmptyResponse::_internal_empty() const {
  return empty_;
}
inline int32_t EmptyResponse::empty() const {
  // @@protoc_insertion_point(field_get:faabric.planner.EmptyResponse.empty)
  return _internal_empty();
}
inline void EmptyResponse::_internal_set_empty(int32_t value) {
  
  empty_ = value;
}
inline void EmptyResponse::set_empty(int32_t value) {
  _internal_set_empty(value);
  // @@protoc_insertion_point(field_set:faabric.planner.EmptyResponse.empty)
}

// -------------------------------------------------------------------

// EmptyRequest

// int32 empty = 1;
inline void EmptyRequest::clear_empty() {
  empty_ = 0;
}
inline int32_t EmptyRequest::_internal_empty() const {
  return empty_;
}
inline int32_t EmptyRequest::empty() const {
  // @@protoc_insertion_point(field_get:faabric.planner.EmptyRequest.empty)
  return _internal_empty();
}
inline void EmptyRequest::_internal_set_empty(int32_t value) {
  
  empty_ = value;
}
inline void EmptyRequest::set_empty(int32_t value) {
  _internal_set_empty(value);
  // @@protoc_insertion_point(field_set:faabric.planner.EmptyRequest.empty)
}

// -------------------------------------------------------------------

// ResponseStatus

// .faabric.planner.ResponseStatus.Status status = 1;
inline void ResponseStatus::clear_status() {
  status_ = 0;
}
inline ::faabric::planner::ResponseStatus_Status ResponseStatus::_internal_status() const {
  return static_cast< ::faabric::planner::ResponseStatus_Status >(status_);
}
inline ::faabric::planner::ResponseStatus_Status ResponseStatus::status() const {
  // @@protoc_insertion_point(field_get:faabric.planner.ResponseStatus.status)
  return _internal_status();
}
inline void ResponseStatus::_internal_set_status(::faabric::planner::ResponseStatus_Status value) {
  
  status_ = value;
}
inline void ResponseStatus::set_status(::faabric::planner::ResponseStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:faabric.planner.ResponseStatus.status)
}

// -------------------------------------------------------------------

// Timestamp

// int64 epochMs = 1;
inline void Timestamp::clear_epochms() {
  epochms_ = int64_t{0};
}
inline int64_t Timestamp::_internal_epochms() const {
  return epochms_;
}
inline int64_t Timestamp::epochms() const {
  // @@protoc_insertion_point(field_get:faabric.planner.Timestamp.epochMs)
  return _internal_epochms();
}
inline void Timestamp::_internal_set_epochms(int64_t value) {
  
  epochms_ = value;
}
inline void Timestamp::set_epochms(int64_t value) {
  _internal_set_epochms(value);
  // @@protoc_insertion_point(field_set:faabric.planner.Timestamp.epochMs)
}

// -------------------------------------------------------------------

// HttpMessage

// .faabric.planner.HttpMessage.Type type = 1;
inline void HttpMessage::clear_type() {
  type_ = 0;
}
inline ::faabric::planner::HttpMessage_Type HttpMessage::_internal_type() const {
  return static_cast< ::faabric::planner::HttpMessage_Type >(type_);
}
inline ::faabric::planner::HttpMessage_Type HttpMessage::type() const {
  // @@protoc_insertion_point(field_get:faabric.planner.HttpMessage.type)
  return _internal_type();
}
inline void HttpMessage::_internal_set_type(::faabric::planner::HttpMessage_Type value) {
  
  type_ = value;
}
inline void HttpMessage::set_type(::faabric::planner::HttpMessage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:faabric.planner.HttpMessage.type)
}

// -------------------------------------------------------------------

// PlannerConfig

// string ip = 1;
inline void PlannerConfig::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& PlannerConfig::ip() const {
  // @@protoc_insertion_point(field_get:faabric.planner.PlannerConfig.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlannerConfig::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faabric.planner.PlannerConfig.ip)
}
inline std::string* PlannerConfig::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:faabric.planner.PlannerConfig.ip)
  return _s;
}
inline const std::string& PlannerConfig::_internal_ip() const {
  return ip_.Get();
}
inline void PlannerConfig::_internal_set_ip(const std::string& value) {
  
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* PlannerConfig::_internal_mutable_ip() {
  
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* PlannerConfig::release_ip() {
  // @@protoc_insertion_point(field_release:faabric.planner.PlannerConfig.ip)
  return ip_.Release();
}
inline void PlannerConfig::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faabric.planner.PlannerConfig.ip)
}

// int32 hostTimeout = 2;
inline void PlannerConfig::clear_hosttimeout() {
  hosttimeout_ = 0;
}
inline int32_t PlannerConfig::_internal_hosttimeout() const {
  return hosttimeout_;
}
inline int32_t PlannerConfig::hosttimeout() const {
  // @@protoc_insertion_point(field_get:faabric.planner.PlannerConfig.hostTimeout)
  return _internal_hosttimeout();
}
inline void PlannerConfig::_internal_set_hosttimeout(int32_t value) {
  
  hosttimeout_ = value;
}
inline void PlannerConfig::set_hosttimeout(int32_t value) {
  _internal_set_hosttimeout(value);
  // @@protoc_insertion_point(field_set:faabric.planner.PlannerConfig.hostTimeout)
}

// int32 numThreadsHttpServer = 3;
inline void PlannerConfig::clear_numthreadshttpserver() {
  numthreadshttpserver_ = 0;
}
inline int32_t PlannerConfig::_internal_numthreadshttpserver() const {
  return numthreadshttpserver_;
}
inline int32_t PlannerConfig::numthreadshttpserver() const {
  // @@protoc_insertion_point(field_get:faabric.planner.PlannerConfig.numThreadsHttpServer)
  return _internal_numthreadshttpserver();
}
inline void PlannerConfig::_internal_set_numthreadshttpserver(int32_t value) {
  
  numthreadshttpserver_ = value;
}
inline void PlannerConfig::set_numthreadshttpserver(int32_t value) {
  _internal_set_numthreadshttpserver(value);
  // @@protoc_insertion_point(field_set:faabric.planner.PlannerConfig.numThreadsHttpServer)
}

// -------------------------------------------------------------------

// Host

// string ip = 1;
inline void Host::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Host::ip() const {
  // @@protoc_insertion_point(field_get:faabric.planner.Host.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Host::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faabric.planner.Host.ip)
}
inline std::string* Host::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:faabric.planner.Host.ip)
  return _s;
}
inline const std::string& Host::_internal_ip() const {
  return ip_.Get();
}
inline void Host::_internal_set_ip(const std::string& value) {
  
  ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Host::_internal_mutable_ip() {
  
  return ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Host::release_ip() {
  // @@protoc_insertion_point(field_release:faabric.planner.Host.ip)
  return ip_.Release();
}
inline void Host::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault()) {
    ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faabric.planner.Host.ip)
}

// int32 slots = 2;
inline void Host::clear_slots() {
  slots_ = 0;
}
inline int32_t Host::_internal_slots() const {
  return slots_;
}
inline int32_t Host::slots() const {
  // @@protoc_insertion_point(field_get:faabric.planner.Host.slots)
  return _internal_slots();
}
inline void Host::_internal_set_slots(int32_t value) {
  
  slots_ = value;
}
inline void Host::set_slots(int32_t value) {
  _internal_set_slots(value);
  // @@protoc_insertion_point(field_set:faabric.planner.Host.slots)
}

// int32 hostId = 3;
inline void Host::clear_hostid() {
  hostid_ = 0;
}
inline int32_t Host::_internal_hostid() const {
  return hostid_;
}
inline int32_t Host::hostid() const {
  // @@protoc_insertion_point(field_get:faabric.planner.Host.hostId)
  return _internal_hostid();
}
inline void Host::_internal_set_hostid(int32_t value) {
  
  hostid_ = value;
}
inline void Host::set_hostid(int32_t value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:faabric.planner.Host.hostId)
}

// .faabric.planner.Timestamp registerTs = 4;
inline bool Host::_internal_has_registerts() const {
  return this != internal_default_instance() && registerts_ != nullptr;
}
inline bool Host::has_registerts() const {
  return _internal_has_registerts();
}
inline void Host::clear_registerts() {
  if (GetArenaForAllocation() == nullptr && registerts_ != nullptr) {
    delete registerts_;
  }
  registerts_ = nullptr;
}
inline const ::faabric::planner::Timestamp& Host::_internal_registerts() const {
  const ::faabric::planner::Timestamp* p = registerts_;
  return p != nullptr ? *p : reinterpret_cast<const ::faabric::planner::Timestamp&>(
      ::faabric::planner::_Timestamp_default_instance_);
}
inline const ::faabric::planner::Timestamp& Host::registerts() const {
  // @@protoc_insertion_point(field_get:faabric.planner.Host.registerTs)
  return _internal_registerts();
}
inline void Host::unsafe_arena_set_allocated_registerts(
    ::faabric::planner::Timestamp* registerts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(registerts_);
  }
  registerts_ = registerts;
  if (registerts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faabric.planner.Host.registerTs)
}
inline ::faabric::planner::Timestamp* Host::release_registerts() {
  
  ::faabric::planner::Timestamp* temp = registerts_;
  registerts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::faabric::planner::Timestamp* Host::unsafe_arena_release_registerts() {
  // @@protoc_insertion_point(field_release:faabric.planner.Host.registerTs)
  
  ::faabric::planner::Timestamp* temp = registerts_;
  registerts_ = nullptr;
  return temp;
}
inline ::faabric::planner::Timestamp* Host::_internal_mutable_registerts() {
  
  if (registerts_ == nullptr) {
    auto* p = CreateMaybeMessage<::faabric::planner::Timestamp>(GetArenaForAllocation());
    registerts_ = p;
  }
  return registerts_;
}
inline ::faabric::planner::Timestamp* Host::mutable_registerts() {
  ::faabric::planner::Timestamp* _msg = _internal_mutable_registerts();
  // @@protoc_insertion_point(field_mutable:faabric.planner.Host.registerTs)
  return _msg;
}
inline void Host::set_allocated_registerts(::faabric::planner::Timestamp* registerts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete registerts_;
  }
  if (registerts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(registerts);
    if (message_arena != submessage_arena) {
      registerts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerts, submessage_arena);
    }
    
  } else {
    
  }
  registerts_ = registerts;
  // @@protoc_insertion_point(field_set_allocated:faabric.planner.Host.registerTs)
}

// -------------------------------------------------------------------

// RegisterHostRequest

// .faabric.planner.Host host = 1;
inline bool RegisterHostRequest::_internal_has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline bool RegisterHostRequest::has_host() const {
  return _internal_has_host();
}
inline void RegisterHostRequest::clear_host() {
  if (GetArenaForAllocation() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
}
inline const ::faabric::planner::Host& RegisterHostRequest::_internal_host() const {
  const ::faabric::planner::Host* p = host_;
  return p != nullptr ? *p : reinterpret_cast<const ::faabric::planner::Host&>(
      ::faabric::planner::_Host_default_instance_);
}
inline const ::faabric::planner::Host& RegisterHostRequest::host() const {
  // @@protoc_insertion_point(field_get:faabric.planner.RegisterHostRequest.host)
  return _internal_host();
}
inline void RegisterHostRequest::unsafe_arena_set_allocated_host(
    ::faabric::planner::Host* host) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faabric.planner.RegisterHostRequest.host)
}
inline ::faabric::planner::Host* RegisterHostRequest::release_host() {
  
  ::faabric::planner::Host* temp = host_;
  host_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::faabric::planner::Host* RegisterHostRequest::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_release:faabric.planner.RegisterHostRequest.host)
  
  ::faabric::planner::Host* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::faabric::planner::Host* RegisterHostRequest::_internal_mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::faabric::planner::Host>(GetArenaForAllocation());
    host_ = p;
  }
  return host_;
}
inline ::faabric::planner::Host* RegisterHostRequest::mutable_host() {
  ::faabric::planner::Host* _msg = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:faabric.planner.RegisterHostRequest.host)
  return _msg;
}
inline void RegisterHostRequest::set_allocated_host(::faabric::planner::Host* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete host_;
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(host);
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:faabric.planner.RegisterHostRequest.host)
}

// -------------------------------------------------------------------

// RegisterHostResponse

// .faabric.planner.ResponseStatus status = 1;
inline bool RegisterHostResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RegisterHostResponse::has_status() const {
  return _internal_has_status();
}
inline void RegisterHostResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::faabric::planner::ResponseStatus& RegisterHostResponse::_internal_status() const {
  const ::faabric::planner::ResponseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::faabric::planner::ResponseStatus&>(
      ::faabric::planner::_ResponseStatus_default_instance_);
}
inline const ::faabric::planner::ResponseStatus& RegisterHostResponse::status() const {
  // @@protoc_insertion_point(field_get:faabric.planner.RegisterHostResponse.status)
  return _internal_status();
}
inline void RegisterHostResponse::unsafe_arena_set_allocated_status(
    ::faabric::planner::ResponseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faabric.planner.RegisterHostResponse.status)
}
inline ::faabric::planner::ResponseStatus* RegisterHostResponse::release_status() {
  
  ::faabric::planner::ResponseStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::faabric::planner::ResponseStatus* RegisterHostResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:faabric.planner.RegisterHostResponse.status)
  
  ::faabric::planner::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::faabric::planner::ResponseStatus* RegisterHostResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::faabric::planner::ResponseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::faabric::planner::ResponseStatus* RegisterHostResponse::mutable_status() {
  ::faabric::planner::ResponseStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:faabric.planner.RegisterHostResponse.status)
  return _msg;
}
inline void RegisterHostResponse::set_allocated_status(::faabric::planner::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:faabric.planner.RegisterHostResponse.status)
}

// .faabric.planner.PlannerConfig config = 2;
inline bool RegisterHostResponse::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool RegisterHostResponse::has_config() const {
  return _internal_has_config();
}
inline void RegisterHostResponse::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::faabric::planner::PlannerConfig& RegisterHostResponse::_internal_config() const {
  const ::faabric::planner::PlannerConfig* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::faabric::planner::PlannerConfig&>(
      ::faabric::planner::_PlannerConfig_default_instance_);
}
inline const ::faabric::planner::PlannerConfig& RegisterHostResponse::config() const {
  // @@protoc_insertion_point(field_get:faabric.planner.RegisterHostResponse.config)
  return _internal_config();
}
inline void RegisterHostResponse::unsafe_arena_set_allocated_config(
    ::faabric::planner::PlannerConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faabric.planner.RegisterHostResponse.config)
}
inline ::faabric::planner::PlannerConfig* RegisterHostResponse::release_config() {
  
  ::faabric::planner::PlannerConfig* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::faabric::planner::PlannerConfig* RegisterHostResponse::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:faabric.planner.RegisterHostResponse.config)
  
  ::faabric::planner::PlannerConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::faabric::planner::PlannerConfig* RegisterHostResponse::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::faabric::planner::PlannerConfig>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::faabric::planner::PlannerConfig* RegisterHostResponse::mutable_config() {
  ::faabric::planner::PlannerConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:faabric.planner.RegisterHostResponse.config)
  return _msg;
}
inline void RegisterHostResponse::set_allocated_config(::faabric::planner::PlannerConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:faabric.planner.RegisterHostResponse.config)
}

// int32 hostId = 3;
inline void RegisterHostResponse::clear_hostid() {
  hostid_ = 0;
}
inline int32_t RegisterHostResponse::_internal_hostid() const {
  return hostid_;
}
inline int32_t RegisterHostResponse::hostid() const {
  // @@protoc_insertion_point(field_get:faabric.planner.RegisterHostResponse.hostId)
  return _internal_hostid();
}
inline void RegisterHostResponse::_internal_set_hostid(int32_t value) {
  
  hostid_ = value;
}
inline void RegisterHostResponse::set_hostid(int32_t value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:faabric.planner.RegisterHostResponse.hostId)
}

// -------------------------------------------------------------------

// RemoveHostRequest

// .faabric.planner.Host host = 1;
inline bool RemoveHostRequest::_internal_has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline bool RemoveHostRequest::has_host() const {
  return _internal_has_host();
}
inline void RemoveHostRequest::clear_host() {
  if (GetArenaForAllocation() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
}
inline const ::faabric::planner::Host& RemoveHostRequest::_internal_host() const {
  const ::faabric::planner::Host* p = host_;
  return p != nullptr ? *p : reinterpret_cast<const ::faabric::planner::Host&>(
      ::faabric::planner::_Host_default_instance_);
}
inline const ::faabric::planner::Host& RemoveHostRequest::host() const {
  // @@protoc_insertion_point(field_get:faabric.planner.RemoveHostRequest.host)
  return _internal_host();
}
inline void RemoveHostRequest::unsafe_arena_set_allocated_host(
    ::faabric::planner::Host* host) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faabric.planner.RemoveHostRequest.host)
}
inline ::faabric::planner::Host* RemoveHostRequest::release_host() {
  
  ::faabric::planner::Host* temp = host_;
  host_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::faabric::planner::Host* RemoveHostRequest::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_release:faabric.planner.RemoveHostRequest.host)
  
  ::faabric::planner::Host* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::faabric::planner::Host* RemoveHostRequest::_internal_mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::faabric::planner::Host>(GetArenaForAllocation());
    host_ = p;
  }
  return host_;
}
inline ::faabric::planner::Host* RemoveHostRequest::mutable_host() {
  ::faabric::planner::Host* _msg = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:faabric.planner.RemoveHostRequest.host)
  return _msg;
}
inline void RemoveHostRequest::set_allocated_host(::faabric::planner::Host* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete host_;
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(host);
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:faabric.planner.RemoveHostRequest.host)
}

// -------------------------------------------------------------------

// RemoveHostResponse

// .faabric.planner.ResponseStatus status = 1;
inline bool RemoveHostResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RemoveHostResponse::has_status() const {
  return _internal_has_status();
}
inline void RemoveHostResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::faabric::planner::ResponseStatus& RemoveHostResponse::_internal_status() const {
  const ::faabric::planner::ResponseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::faabric::planner::ResponseStatus&>(
      ::faabric::planner::_ResponseStatus_default_instance_);
}
inline const ::faabric::planner::ResponseStatus& RemoveHostResponse::status() const {
  // @@protoc_insertion_point(field_get:faabric.planner.RemoveHostResponse.status)
  return _internal_status();
}
inline void RemoveHostResponse::unsafe_arena_set_allocated_status(
    ::faabric::planner::ResponseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:faabric.planner.RemoveHostResponse.status)
}
inline ::faabric::planner::ResponseStatus* RemoveHostResponse::release_status() {
  
  ::faabric::planner::ResponseStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::faabric::planner::ResponseStatus* RemoveHostResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:faabric.planner.RemoveHostResponse.status)
  
  ::faabric::planner::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::faabric::planner::ResponseStatus* RemoveHostResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::faabric::planner::ResponseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::faabric::planner::ResponseStatus* RemoveHostResponse::mutable_status() {
  ::faabric::planner::ResponseStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:faabric.planner.RemoveHostResponse.status)
  return _msg;
}
inline void RemoveHostResponse::set_allocated_status(::faabric::planner::ResponseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:faabric.planner.RemoveHostResponse.status)
}

// -------------------------------------------------------------------

// AvailableHostsResponse

// repeated .faabric.planner.Host hosts = 1;
inline int AvailableHostsResponse::_internal_hosts_size() const {
  return hosts_.size();
}
inline int AvailableHostsResponse::hosts_size() const {
  return _internal_hosts_size();
}
inline void AvailableHostsResponse::clear_hosts() {
  hosts_.Clear();
}
inline ::faabric::planner::Host* AvailableHostsResponse::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:faabric.planner.AvailableHostsResponse.hosts)
  return hosts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faabric::planner::Host >*
AvailableHostsResponse::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:faabric.planner.AvailableHostsResponse.hosts)
  return &hosts_;
}
inline const ::faabric::planner::Host& AvailableHostsResponse::_internal_hosts(int index) const {
  return hosts_.Get(index);
}
inline const ::faabric::planner::Host& AvailableHostsResponse::hosts(int index) const {
  // @@protoc_insertion_point(field_get:faabric.planner.AvailableHostsResponse.hosts)
  return _internal_hosts(index);
}
inline ::faabric::planner::Host* AvailableHostsResponse::_internal_add_hosts() {
  return hosts_.Add();
}
inline ::faabric::planner::Host* AvailableHostsResponse::add_hosts() {
  ::faabric::planner::Host* _add = _internal_add_hosts();
  // @@protoc_insertion_point(field_add:faabric.planner.AvailableHostsResponse.hosts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faabric::planner::Host >&
AvailableHostsResponse::hosts() const {
  // @@protoc_insertion_point(field_list:faabric.planner.AvailableHostsResponse.hosts)
  return hosts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planner
}  // namespace faabric

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::faabric::planner::ResponseStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::faabric::planner::ResponseStatus_Status>() {
  return ::faabric::planner::ResponseStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::faabric::planner::HttpMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::faabric::planner::HttpMessage_Type>() {
  return ::faabric::planner::HttpMessage_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planner_2eproto
